"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
class LineSplitter extends stream_1.Transform {
    constructor(options) {
        super(Object.assign({ readableObjectMode: true }, options));
        this.internalBuffer = [];
        this.eol13 = Buffer.from('\r\n');
        this.eol10 = Buffer.from('\n');
    }
    _transform(chunk, _encoding, next) {
        var index = 0;
        var pos;
        while ((pos = chunk.indexOf(10, index)) != -1) {
            var with13 = pos && chunk[pos - 1] == 13;
            this.push({ line: Buffer.concat([...this.internalBuffer, chunk.slice(index, pos - (with13 ? 1 : 0))]), eol: with13 ? this.eol13 : this.eol10 });
            this.internalBuffer = [];
            index = pos + 1;
        }
        this.internalBuffer.push(chunk.slice(index));
        next();
    }
    _flush(done) {
        if (this.internalBuffer.length && this.internalBuffer.find(x => x.length > 0 || x.byteLength > 0)) {
            this.push({ line: Buffer.concat(this.internalBuffer), eol: Buffer.from('') });
        }
        done();
    }
}
exports.LineSplitter = LineSplitter;
class LineJoiner extends stream_1.Transform {
    constructor(options) {
        super(Object.assign({ writableObjectMode: true }, options));
    }
    _transform(chunk, _encoding, next) {
        this.push(chunk.line);
        this.push(chunk.eol);
        next();
    }
}
exports.LineJoiner = LineJoiner;
class EscapeCharsTransform extends stream_1.Transform {
    constructor(options) {
        var { charsToEscape, prefixChar } = options, superOptions = __rest(options, ["charsToEscape", "prefixChar"]);
        super(Object.assign({ objectMode: true }, superOptions));
        this.prefixBuffer = Buffer.alloc(1, prefixChar);
        this.charsMap = {};
        var self = this;
        charsToEscape.split('').forEach(function (char) {
            var ascii = char.charCodeAt(0);
            self.charsMap[ascii] = true;
        });
    }
    _transform(chunk, _encoding, next) {
        var index = 0;
        var pos = 0;
        var parts = [];
        while (pos < chunk.line.byteLength) {
            if (this.charsMap[chunk.line[pos]]) {
                parts.push(chunk.line.slice(index, pos));
                parts.push(this.prefixBuffer);
                index = pos;
            }
            pos++;
        }
        parts.push(chunk.line.slice(index));
        this.push({ line: Buffer.concat(parts), eol: chunk.eol });
        next();
    }
}
exports.EscapeCharsTransform = EscapeCharsTransform;
async function streamSignalsDone(stream) {
    return new Promise(function (resolve, reject) {
        stream.on('error', function (err) {
            reject(err);
        });
        stream.on('close', function () {
            resolve();
        });
        stream.on('end', function () {
            resolve();
        });
    });
}
exports.streamSignalsDone = streamSignalsDone;
//# sourceMappingURL=data:application/json;base64,